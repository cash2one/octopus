<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<htb.devfx>
		<objects configSet="{tag:'object'}">
			<namespace>
				<objects name="Data" configSet="{tag:'object'}">
					<object name="DataPaginateResultHandler" type="IResultHandler" mapTo="Joy.Admin.Extensions.DataManages.DataPaginateResultHandler, Joy.Admin.Extensions">
						<lifetime type="Singleton" />
						<constructor configSet="{tag:'parameter'}">
							<parameter name="objectMapper" type="IObjectMapper" value="@ObjectMapper" />
						</constructor>
					</object>
				</objects>
			</namespace>

			<object name="DataManageService" type="Joy.Admin.Extensions.DataManages.IDataManageService, Joy.Admin.Extensions" mapTo="Joy.Admin.Extensions.DataManages.DataManageService, Joy.Admin.Extensions"
				setting="{name:'../../admin/dataManages', type:'Joy.Admin.Extensions.DataManages.Config.DataManageServiceSetting, Joy.Admin.Extensions'}">
				<lifetime type="Singleton" />
			</object>
		</objects>

		<admin>
			<dataManages>
				<items configSet="{tag:'item'}" />
			</dataManages>
		</admin>

		<data configSet="{tag:'statements', nullable:'true'}">
			<statements name="DataManages">
				<add name="Query" resultHandler="@Data.DataPaginateResultHandler">
					<parameters>
						<add name="Parameters" parameterName="@Parameters" expandable="true" nullable="false" />
					</parameters>
					<commandText parser="@Data.RazorCommandTextParser">
					<![CDATA[@helper where() {
						if(Model.Contains("Query") && Model.Query.Length > 0) {
							var sb = new System.Text.StringBuilder();
							sb.Append("WHERE");
							for(var i = 0; i < Model.Query.Length; i++) {
								var item = Model.Query[i];
								if(i > 0) {
									sb.Append(" AND");
								}
								sb.AppendFormat(" [{0}] {1} @{0}", item.Name, item.Operator);
							}
							@:@sb.ToString()
						}
					}
					@helper orderby() {
						var sb = new System.Text.StringBuilder();
						var i = 0;
						sb.Append("ORDER BY ");
						foreach(var key in Model.OrderBy.Keys) {
							if(i > 0) {
								sb.Append(",");
							}
							i++;
							sb.AppendFormat("[{0}] {1}", key, Model.OrderBy[key]);
						}
						@:@sb.ToString()
					}
					SELECT COUNT(*) FROM [@Model.TableName] WITH(NOLOCK) @where();
					WITH T AS (
						SELECT *, ROW_NUMBER() OVER (@orderby()) AS RowIndex FROM [@Model.TableName] WITH(NOLOCK) @where()
					) SELECT TOP (@Model.Length) * FROM T WHERE RowIndex > @Model.StartIndex
					]]></commandText>
				</add>
			</statements>
		</data>
	</htb.devfx>
</configuration>